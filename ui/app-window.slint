import { ComboBox, SpinBox, Button, CheckBox, Slider, LineEdit, ScrollView, ListView, HorizontalBox, VerticalBox, GridBox, StandardButton, Palette } from "std-widgets.slint";

@rust-attr(derive(serde::Serialize, serde::Deserialize))
export struct TodoItem  {
    title: string,
    checked: bool,
    is-dir: bool,
    full_path: string,
}

export struct Point  {
    x: int,
    y: int,
}

export component AppWindow inherits Window {
    // Current directory in the adress bar
    in-out property <string> path: "/home/jord/coding/texturizers";

    // Placeholder image to display the logo until the user selects his own image
    in-out property <image> image: @image-url("./TexturizersLogo.png");

    // Mouse
    in-out property <Point> image-initial-click: { x: 0, y: 0 };
    in-out property <Point> image-release-click: { x: 0, y: 0 };


    // User clicked the back / go up button to change directory
    callback go-to-parent() -> string;

    // Must be called when directory changed to display the new files
    callback update-file-tree();

    // Updates the displayed image as well as the Boxed / cached image
    callback setimg(path: string);

    //Image manipulation
    callback roll-image(start: Point, end: Point);

    in property original-image <=> original.source;

    in-out property <[TodoItem]> todo-model: [];
    title: "Texturize.rs";
    VerticalBox {
        HorizontalLayout {
            height: 30px;
            Button {
                private property <string> parent;
                parent: "";
                text: "ðŸ „";
                clicked => {
                    // side-effects:
                    // 1. Updates the root.path to the parent
                    // 2. Refreshes the filetree
                    self.parent = go-to-parent();
                    le.text = root.path;
                }
            }

            le := LineEdit {
                text: root.path;

                init() => {
                    self.focus();
                    // side-effects:
                    // 1. Refreshes the filetree
                    root.update-file-tree();
                }
                edited(new) => {
                    root.path = "\{new}";
                    // side-effects:
                    // 1. Refreshes the filetree
                    root.update-file-tree();
                }
            }
        }

        HorizontalLayout {
            ListView {
                for todo in root.todo-model: HorizontalLayout {
                    padding-bottom: 3px;
                    Button {
                        private property <bool> was-clicked;
                        in-out property <bool> is-dir;
                        was-clicked: false;
                        height: 30px;
                        width: parent.width;
                        text: todo.title;

                        checked: todo.checked;
                        is-dir: todo.is-dir;
                        primary: self.is-dir;

                        clicked() => {
                            if (self.was-clicked && self.is-dir) {
                                root.path = todo.full-path;
                                le.text = todo.full-path;
                                // side-effects:
                                // 1. Refreshes the filetree
                                root.update-file-tree();
                            }
                            root.setimg(todo.full-path);
                            self.was-clicked = true;
                        }
                    }
                }
            }

            HorizontalBox {

                min-width: 1000px;
                max-width: 1200px;

                original := Image {
                    image-fit: fill;
                    source: root.image;

                    area := TouchArea {
                        pure function get-mouse-point() -> Point {
                            return { x: self.mouse-x / 1px, y: self.mouse-y / 1px };
                        }

                        width: parent.width;
                        height: parent.height;

                        pointer-event(event) => {
                            if (event.button == PointerEventButton.left && event.kind == PointerEventKind.down) {
                                root.image-initial-click = get-mouse-point();
                                debug("Start:");
                                debug(root.image-initial-click);
                            }
                            if (event.button == PointerEventButton.left && event.kind == PointerEventKind.up) {
                                root.image-release-click = get-mouse-point();
                                debug("End:");
                                debug(root.image-release-click);
                                roll-image(root.image-initial-click, root.image-release-click);
                            }
                        }

                        moved => {
                        }
                    }
                }
            }
        }
    }
}
