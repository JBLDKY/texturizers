import { ComboBox, SpinBox, Button, CheckBox, Slider, LineEdit, ScrollView, ListView, HorizontalBox, VerticalBox, GridBox, StandardButton, Palette } from "std-widgets.slint";
import { Recipe } from "recipe.slint";

@rust-attr(derive(serde::Serialize, serde::Deserialize))
export struct TodoItem  {
    title: string,
    checked: bool,
    is-dir: bool,
    full_path: string,
}

export struct Point  {
    x: int,
    y: int,
}

export component AppWindow inherits Window {
    // Current directory in the adress bar
    in-out property <string> path: "/home/jord/coding/texturizers";

    // Placeholder image to display the logo until the user selects his own image
    private property <string> logo-path: "./TexturizersLogo.png";
    in-out property <image> image: @image-url("./TexturizersLogo.png");

    // Mouse
    in-out property <Point> image-initial-click: { x: 0, y: 0 };
    in-out property <Point> image-release-click: { x: 0, y: 0 };


    // User clicked the back / go up button to change directory
    callback go-to-parent() -> string;

    // Must be called when directory changed to display the new files
    callback update-file-tree();

    // Updates the displayed image as well as the Boxed / cached image
    callback setimg(path: string);

    //Image manipulation
    callback roll-y(y: float);
    callback roll-x(x: float);

    in property original-image <=> original.source;

    in-out property <[TodoItem]> todo-model: [];
    title: "Texturize.rs";
    in-out property <int> active-tab;
    VerticalLayout {

        tab_bar := HorizontalLayout {
            spacing: 3px;
            Button {
                text: "Texture";
                clicked => {
                    root.active-tab = 0;
                }
            }

            Button {
                text: "Settings";
                clicked => {
                    root.active-tab = 1;
                }
            }
        }

        Rectangle {
            clip: true;
            Rectangle {
                x: root.active-tab == 0 ? 0 : root.active-tab < 0 ? - self.width - 1px : parent.width + 1px;
                animate x {
                    duration: 125ms;
                    easing: ease;
                }
                VerticalBox {

                    HorizontalLayout {
                        height: 30px;
                        Button {
                            private property <string> parent;
                            parent: "";
                            text: "ðŸ „";
                            clicked => {
                    // side-effects:
                    // 1. Updates the root.path to the parent
                    // 2. Refreshes the filetree
                    self.parent = go-to-parent();
                                le.text = root.path;
                            }
                        }

                        le := LineEdit {
                            text: root.path;

                            init() => {
                                self.focus();
                    // side-effects:
                    // 1. Refreshes the filetree
                    root.update-file-tree();
                            }
                            edited(new) => {
                                root.path = "\{new}";
                    // side-effects:
                    // 1. Refreshes the filetree
                    root.update-file-tree();
                            }
                        }
                    }

                    HorizontalLayout {
                        ListView {
                            for todo in root.todo-model: HorizontalLayout {
                                padding-bottom: 3px;
                                Button {
                                    private property <bool> was-clicked;
                                    in-out property <bool> is-dir;
                                    was-clicked: false;
                                    height: 30px;
                                    width: parent.width;
                                    text: todo.title;

                                    checked: todo.checked;
                                    is-dir: todo.is-dir;
                                    primary: self.is-dir;

                                    clicked() => {
                                        if (self.was-clicked && self.is-dir) {
                                            root.path = todo.full-path;
                                            le.text = todo.full-path;
                                // side-effects:
                                // 1. Refreshes the filetree
                                root.update-file-tree();
                                        }
                                        root.setimg(todo.full-path);
                                        self.was-clicked = true;
                                    }
                                }
                            }
                        }

                        VerticalBox {
                            HorizontalBox {
                                x := Slider {
                                    private property <float> cur-x;
                                    cur-x: 0.0;
                                    value: 0.0;
                                    minimum: 0.0;
                                    maximum: 1.0;
                                    step: 0.05;

                                    changed(value) => {
                                        if (value - self.cur-x != 0) {
                                            roll-x(value - self.cur-x);
                                        }
                                        self.cur-x = value;
                                    }
                                }

                                y := Slider {
                                    private property <float> cur-y;
                                    cur-y: 0.0;
                                    value: 0.0;
                                    minimum: 0.0;
                                    maximum: 1.0;
                                    step: 0.05;

                                    changed(value) => {
                                        if (value - self.cur-y != 0) {
                                            roll-y(value - self.cur-y);
                                        }
                                        self.cur-y = value;
                                    }
                                }
                            }

                            HorizontalBox {
                                height: 30px;
                                CheckBox {
                                    height: parent.height;
                                    text: "Nearest";
                                    checked: true;
                                }

                                Button {
                                    height: parent.height;
                                    text: "Export";
                                }
                            }

                            HorizontalBox {
                                min-width: 1000px;
                                max-width: 1200px;
                                min-height: 1000px;

                                original := Image {
                                    image-fit: fill;
                                    source: root.image;
                                }
                            }
                        }
                    }
                }
            }

            Rectangle {
                x: root.active-tab == 1 ? 0 : root.active-tab < 1 ? - self.width - 1px : parent.width + 1px;
                animate x {
                    duration: 125ms;
                    easing: ease;
                }

                VerticalBox {

                    Text {
                        text: "Output dir: ";
                    }

                    LineEdit {
                        text: root.path;
                    }

                    ListView {
                        for data in [
                            { text: "Scale by W" },
                            { text: "Scale by H" },
                            { text: "x512" },
                            { text: "x256" },
                            { text: "x128" },
                            { text: "x64" },
                            { text: "x32" },
                            { text: "x16" },
                        ]: CheckBox {
                            padding-left: 20px;
                            height: 30px;
                            width: parent.width;
                            text: data.text;
                            checked: true;
                        }
                    }
                }
            }
        }
    }
}
